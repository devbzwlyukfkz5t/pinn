name: PINN

on:
  workflow_dispatch:
  schedule:
    - cron: 0 0 */3 * *

env:
  REPO_URL: https://github.com/devbzwlyukfkz5t/pinn
  REPO_BRANCH: master
  CACHE_TOOLCHAIN: true
  UPLOAD_BIN_DIR: true
  FIRMWARE_RELEASE: true
  FIRMWARE_TAG: pinn
  TZ: Asia/Shanghai

jobs:
  Build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Check Server Performance
      run: |
        #----------------------------------------------------------------------------#
        ## Android NDK     :: ~ 12.0 GB
         sudo rm "/usr/local/lib/android" -rf >/dev/null 2>&1 &
        #----------------------------------------------------------------------------#
        ## AWS             :: ~ 500 MB
         find "/usr/local" -maxdepth 1 -type d -name '*aws*cli*' -exec sudo rm {} -rf \; >/dev/null 2>&1 &
        #----------------------------------------------------------------------------#
        ## Azure cli      :: ~ 800 MB
         sudo rm "/opt/az" -rf >/dev/null 2>&1 &
        #----------------------------------------------------------------------------#
        ## AZ (PowerShell) :: ~ 500 MB
         find "/usr/share" -maxdepth 1 -type d -name 'az_*' -exec sudo rm {} -rf \; >/dev/null 2>&1 &     
        #----------------------------------------------------------------------------#
        ## DotNET          :: ~ 2.0 GB
         sudo rm "/usr/lib/dotnet" -rf >/dev/null 2>&1 &
         sudo rm "/usr/share/dotnet" -rf >/dev/null 2>&1 &
        #----------------------------------------------------------------------------#
        ## GCP SDK         :: ~ 2.0 GB
         sudo rm "/usr/lib/google-cloud-sdk" -rf >/dev/null 2>&1 &     
        #----------------------------------------------------------------------------#
        ## Haskell         :: ~ 5.0 GB
         sudo rm "/usr/local/.ghcup" -rf >/dev/null 2>&1 &
        #----------------------------------------------------------------------------#
        ## Heroku          :: ~ 500 MB
         sudo rm "/usr/local/lib/heroku" -rf >/dev/null 2>&1 &
        #----------------------------------------------------------------------------#
        ## HostedToolCache :: ~ 12 GB
         sudo rm "/opt/hostedtoolcache" -rf >/dev/null 2>&1 &
        #----------------------------------------------------------------------------#
        ## JVM             :: ~ 1.5 GB
         sudo rm "/usr/lib/jvm" -rf >/dev/null 2>&1 &
        #----------------------------------------------------------------------------#
        ## Julia           :: ~ 500 MB
         find "/usr/local" -maxdepth 1 -type d -name '*julia*' -exec sudo rm {} -rf \; >/dev/null 2>&1 &
        #----------------------------------------------------------------------------#
        ## Miniconda       :: ~ 700 MB
         sudo rm "/usr/share/miniconda" -rf >/dev/null 2>&1 &
        #----------------------------------------------------------------------------#
        ## Microsoft       :: ~ 700 MB
         sudo rm "/opt/microsoft" -rf >/dev/null 2>&1 &
        #----------------------------------------------------------------------------#
        ## Mono (.NET)     :: ~ 1.5 GB
         sudo rm "/usr/lib/mono" -rf >/dev/null 2>&1 &     
        #----------------------------------------------------------------------------#
        #WARNING: This seem to break some core components, rendering the runner unusable & terminate
        ## Node Modules    :: ~ 1.1 GB
         #sudo rm "/usr/local/lib/node_modules" -rf >/dev/null 2>&1 &
        #----------------------------------------------------------------------------#
        ## PowerShell      :: ~ 1.0 GB
         sudo rm "/usr/local/share/powershell" -rf >/dev/null 2>&1 &
        #----------------------------------------------------------------------------#
        ## Swift           :: ~ 1.7 GB
         sudo rm "/usr/share/swift" -rf >/dev/null 2>&1 &
        #----------------------------------------------------------------------------#
        echo "警告⚠"
        echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
        echo -e "已知CPU型号（降序）：7763，8370C，8272CL，8171M，E5-2673 \n"
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量：$(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo -e "CPU核心信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo "--------------------------内存信息--------------------------"
        echo "已安装内存详细信息："
        echo -e "$(sudo lshw -short -C memory | grep GiB) \n"
        echo "--------------------------硬盘信息--------------------------"
        echo "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

    - name: Initialization Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        #docker rmi $(docker image ls | awk '{print $3}')
        #sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android $AGENT_TOOLSDIRECTORY
        sudo -E apt-get update
        sudo -E apt-get -y install software-properties-common
        sudo -E add-apt-repository ppa:rock-core/qt4
        sudo sed -i 's/jammy/focal/g' /etc/apt/sources.list.d/rock-core-ubuntu-qt4-jammy.list
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential rsync texinfo libncurses-dev whois unzip bc qt4-linguist-tools libssl-dev libgmp-dev
        sudo -E apt-get -y install qt4-dev-tools libqt4-dev libqtcore4 libqtgui4
        sudo -E systemctl daemon-reload
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get -y clean
        sudo timedatectl set-timezone "$TZ"
        wget https://www.libarchive.org/downloads/libarchive-3.3.1.tar.gz
        tar xzf libarchive-3.3.1.tar.gz && cd libarchive-3.3.1
        ./configure && make && make install

    - name: Clone Source Code
      run: |
        df -hT $GITHUB_WORKSPACE
        git clone $REPO_URL -b $REPO_BRANCH pinn
        cd pinn
        echo "PINN_PATH=$PWD" >> $GITHUB_ENV
        author=$(git show -s --date=short --format="作者: %an")
        date=$(git show -s --date=short --format="时间: %ci")
        commit=$(git show -s --date=short --format="内容: %s")
        hash=$(git show -s --date=short --format="hash: %H")
        echo "author=$author" >> $GITHUB_ENV
        echo "date=$date" >> $GITHUB_ENV
        echo "commit=$commit" >> $GITHUB_ENV
        echo "hash=$hash" >> $GITHUB_ENV

    - name: Compile Firmware
      id: compile
      run: |
        cd $PINN_PATH
        ./BUILDME.sh
        echo "status=success" >> $GITHUB_OUTPUT
        echo "DATE=$(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        echo "FILE_DATE=$(date +"%Y.%m.%d")" >> $GITHUB_ENV
